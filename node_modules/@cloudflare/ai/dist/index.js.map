{
  "version": 3,
  "sources": ["../src/tensor.ts", "../src/templates.ts", "../src/tasks/text-generation.ts", "../src/tasks/text-classification.ts", "../src/tasks/text-embeddings.ts", "../src/tasks/translation.ts", "../src/tasks/speech-recognition.ts", "../src/tasks/data/labels.ts", "../src/tasks/image-classification.ts", "../src/tasks/object-detection.ts", "../src/tasks/text-to-image.ts", "../src/tasks/sentence-similarity.ts", "../src/catalog.ts", "../src/tools.ts", "../src/session.ts", "../src/ai.ts"],
  "sourcesContent": ["export enum TensorType {\n  String = \"str\",\n  Bool = \"bool\",\n  Float16 = \"float16\",\n  Float32 = \"float32\",\n  // Float64 = \"float64\",\n  Int16 = \"int16\",\n  Int32 = \"int32\",\n  Int64 = \"int64\",\n  Int8 = \"int8\",\n  Uint16 = \"uint16\",\n  Uint32 = \"uint32\",\n  Uint64 = \"uint64\",\n  Uint8 = \"uint8\",\n}\n\ntype TensorOpts = {\n  shape?: number[];\n  name?: string;\n};\n\nexport type TensorsObject = {\n  [name: string]: Tensor<any>;\n};\n\nconst TypedArrayProto = Object.getPrototypeOf(Uint8Array);\n\nfunction isArray(value: any) {\n  return Array.isArray(value) || value instanceof TypedArrayProto;\n}\n\n// counts arrays, typed arrays, and arrays of typed arrays\nfunction arrLength(obj: any) {\n  return obj instanceof TypedArrayProto\n    ? obj.length\n    : obj.flat(Infinity).reduce((acc: any, cur: any) => acc + (cur instanceof TypedArrayProto ? cur.length : 1), 0);\n}\n\nfunction ensureShape(shape: number[], value: any) {\n  if (shape.length === 0 && !isArray(value)) {\n    // scalar value\n    return;\n  }\n\n  const count = shape.reduce((acc, v) => {\n    if (!Number.isInteger(v)) {\n      throw new Error(`expected shape to be array-like of integers but found non-integer element \"${v}\"`);\n    }\n    return acc * v;\n  }, 1);\n\n  if (count != arrLength(value)) {\n    throw new Error(\n      `invalid shape: expected ${count} elements for shape ${shape} but value array has length ${value.length}`\n    );\n  }\n}\n\nfunction ensureType(type: TensorType, value: any) {\n  if (isArray(value)) {\n    value.forEach((v: any) => ensureType(type, v));\n    return;\n  }\n\n  switch (type) {\n    case TensorType.Bool: {\n      if (typeof value === \"boolean\") {\n        return;\n      }\n      break;\n    }\n\n    case TensorType.Float16:\n    case TensorType.Float32: {\n      // We can't make sure the value is a float (using !Number.isInteger) because\n      // it's not possible in JS to transform a int into a float, which would\n      // make our API unsuable.\n      if (typeof value === \"number\") {\n        return;\n      }\n      break;\n    }\n\n    case TensorType.Int8:\n    case TensorType.Uint8:\n    case TensorType.Int16:\n    case TensorType.Uint16:\n    case TensorType.Int32:\n    case TensorType.Uint32: {\n      if (Number.isInteger(value)) {\n        return;\n      }\n      break;\n    }\n\n    case TensorType.Int64:\n    case TensorType.Uint64: {\n      if (typeof value === \"bigint\") {\n        return;\n      }\n      break;\n    }\n\n    case TensorType.String: {\n      if (typeof value === \"string\") {\n        return;\n      }\n      break;\n    }\n  }\n\n  throw new Error(`unexpected type \"${type}\" with value \"${value}\".`);\n}\n\nfunction serializeType(type: TensorType, value: any) {\n  if (isArray(value)) {\n    // Return as an array, transform TypedArray into regular arrays.\n    return [...value].map((v) => serializeType(type, v));\n  }\n  switch (type) {\n    case TensorType.String:\n    case TensorType.Bool:\n    case TensorType.Float16:\n    case TensorType.Float32:\n    case TensorType.Int8:\n    case TensorType.Uint8:\n    case TensorType.Int16:\n    case TensorType.Uint16:\n    case TensorType.Uint32:\n    case TensorType.Int32: {\n      return value;\n    }\n\n    case TensorType.Int64:\n    case TensorType.Uint64: {\n      return value.toString();\n    }\n  }\n\n  throw new Error(`unexpected type \"${type}\" with value \"${value}\".`);\n}\n\nfunction deserializeType(type: TensorType, value: any) {\n  if (isArray(value)) {\n    return value.map((v) => deserializeType(type, v));\n  }\n  switch (type) {\n    case TensorType.String:\n    case TensorType.Bool:\n    case TensorType.Float16:\n    case TensorType.Float32:\n    case TensorType.Int8:\n    case TensorType.Uint8:\n    case TensorType.Int16:\n    case TensorType.Uint16:\n    case TensorType.Uint32:\n    case TensorType.Int32: {\n      return value;\n    }\n\n    case TensorType.Int64:\n    case TensorType.Uint64: {\n      return BigInt(value);\n    }\n  }\n\n  throw new Error(`unexpected type \"${type}\" with value \"${value}\".`);\n}\n\nexport class Tensor<T extends TensorType> {\n  type: T;\n  value: any | any[];\n  name: string | null;\n  shape: number[];\n\n  constructor(type: T, value: any | any[], opts: TensorOpts = {}) {\n    this.type = type;\n    this.value = value;\n\n    ensureType(type, this.value);\n\n    if (opts.shape === undefined) {\n      if (isArray(this.value)) {\n        this.shape = [arrLength(value)];\n      } else {\n        this.shape = [];\n        // this.shape = [1];\n        // this.value = [value];\n      }\n    } else {\n      this.shape = opts.shape;\n    }\n\n    ensureShape(this.shape, this.value);\n\n    this.name = opts.name || null;\n  }\n\n  static fromJSON(obj: any): Tensor<any> {\n    const { type, shape, value, b64Value, name } = obj;\n    const opts = { shape, name };\n\n    if (b64Value !== undefined) {\n      // `b64Value` is the legacy encoding for values that aren't representable in\n      // JSON; old constellation-js client are still sending b64Value.\n      const value = b64ToArray(b64Value, type)[0];\n      return new Tensor(type, value, opts);\n    } else {\n      return new Tensor(type, deserializeType(type, value), opts);\n    }\n  }\n\n  toJSON() {\n    return {\n      type: this.type,\n      shape: this.shape,\n      name: this.name,\n      value: serializeType(this.type, this.value),\n    };\n  }\n}\n\n// Support for legacy value encoding\nfunction b64ToArray(base64: string, type: string) {\n  const byteString = atob(base64);\n  const bytes = new Uint8Array(byteString.length);\n  for (let i = 0; i < byteString.length; i++) {\n    bytes[i] = byteString.charCodeAt(i);\n  }\n  const arrBuffer = new DataView(bytes.buffer).buffer;\n\n  switch (type) {\n    case \"float32\":\n      return new Float32Array(arrBuffer);\n    case \"float64\":\n      return new Float64Array(arrBuffer);\n    case \"int32\":\n      return new Int32Array(arrBuffer);\n    case \"int64\":\n      return new BigInt64Array(arrBuffer);\n    default:\n      throw Error(`invalid data type for base64 input: ${type}`);\n  }\n}\n", "export enum templateFlags {\n  NONE,\n  CARRY_SYSTEM_INST,\n  ABSORB_ROLE,\n  APPEND_LAST_SYSTEM,\n}\n\nexport const tgTemplates = {\n  // ex: https://huggingface.co/TheBloke/deepseek-coder-6.7B-base-AWQ\n  bare: {\n    system: {\n      flag: templateFlags.ABSORB_ROLE,\n    },\n    user: {\n      flag: templateFlags.APPEND_LAST_SYSTEM,\n    },\n    assistant: {\n      pre: \" \",\n      post: \" \",\n    },\n  },\n  // ex: https://huggingface.co/TheBloke/LlamaGuard-7B-AWQ\n  inst: {\n    system: {\n      flag: templateFlags.ABSORB_ROLE,\n    },\n    user: {\n      pre: \"[INST] \",\n      post: \" [/INST]\",\n      flag: templateFlags.APPEND_LAST_SYSTEM,\n    },\n    assistant: {\n      pre: \" \",\n      post: \" \",\n    },\n  },\n  // https://github.com/facebookresearch/llama/blob/main/llama/generation.py#L340-L361\n  // https://replicate.com/blog/how-to-prompt-llama\n  // https://huggingface.co/TheBloke/Llama-2-13B-chat-AWQ#prompt-template-llama-2-chat\n  llama2: {\n    system: {\n      pre: \"[INST] <<SYS>>\\n\",\n      post: \"\\n<</SYS>>\\n\\n\",\n    },\n    user: {\n      pre: \"<s>[INST] \",\n      post: \" [/INST]\",\n      flag: templateFlags.CARRY_SYSTEM_INST,\n    },\n    assistant: {\n      pre: \" \",\n      post: \"</s>\",\n    },\n  },\n  // https://huggingface.co/TheBloke/deepseek-coder-6.7B-instruct-AWQ\n  deepseek: {\n    system: {\n      post: \"\\n\",\n    },\n    user: {\n      pre: \"### Instruction:\\n\",\n      post: \"\\n\",\n    },\n    assistant: {\n      pre: \"### Response:\\n\",\n      post: \"\\n\",\n    },\n    global: {\n      post: \"### Response:\\n\",\n    },\n  },\n  // https://huggingface.co/TheBloke/openchat_3.5-AWQ#prompt-template-openchat\n  openchat: {\n    system: {\n      flag: templateFlags.ABSORB_ROLE,\n    },\n    user: {\n      pre: \"GPT4 User: \",\n      post: \"<|end_of_turn|>\",\n      flag: templateFlags.APPEND_LAST_SYSTEM,\n    },\n    assistant: {\n      pre: \"GPT4 Assistant: \",\n      post: \"<|end_of_turn|>\",\n    },\n    global: {\n      post: \"GPT4 Assistant:\",\n    },\n  },\n  // https://huggingface.co/TheBloke/OpenHermes-2.5-Mistral-7B-AWQ#prompt-template-chatml\n  // https://huggingface.co/TheBloke/Orca-2-13B-AWQ#prompt-template-chatml\n  chatml: {\n    system: {\n      pre: \"<|im_start|>system\\n\",\n      post: \"<|im_end|>\\n\",\n    },\n    user: {\n      pre: \"<|im_start|>user\\n\",\n      post: \"<|im_end|>\\n\",\n    },\n    assistant: {\n      pre: \"<|im_start|>assistant\\n\",\n      post: \"<|im_end|>\\n\",\n    },\n    global: {\n      post: \"<|im_start|>assistant\\n\",\n    },\n  },\n  // https://huggingface.co/TheBloke/neural-chat-7B-v3-1-AWQ#prompt-template-orca-hashes\n  \"orca-hashes\": {\n    system: {\n      pre: \"### System:\\n\",\n      post: \"\\n\\n\",\n    },\n    user: {\n      pre: \"### User:\\n\",\n      post: \"\\n\\n\",\n    },\n    assistant: {\n      pre: \"### Assistant:\\n\",\n      post: \"\\n\\n\",\n    },\n    global: {\n      post: \"### Assistant:\\n\\n\",\n    },\n  },\n  // https://huggingface.co/TheBloke/CodeLlama-7B-Instruct-AWQ#prompt-template-codellama\n  \"codellama-instruct\": {\n    system: {\n      pre: \"[INST] \",\n      post: \"\\n\",\n    },\n    user: {\n      pre: \"[INST] \",\n      post: \" [/INST]\\n\",\n      flag: templateFlags.CARRY_SYSTEM_INST,\n    },\n    assistant: {\n      post: \"\\n\",\n    },\n  },\n  // https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.1-AWQ#prompt-template-mistral\n  \"mistral-instruct\": {\n    system: {\n      pre: \"<s>[INST] \",\n      post: \" \",\n    },\n    user: {\n      pre: \"[INST] \",\n      post: \" [/INST]\",\n      flag: templateFlags.CARRY_SYSTEM_INST,\n    },\n    assistant: {\n      pre: \" \",\n      post: \"</s>\",\n    },\n  },\n  // https://huggingface.co/TheBloke/zephyr-7B-beta-AWQ#prompt-template-zephyr\n  // https://huggingface.co/HuggingFaceH4/zephyr-7b-alpha\n  zephyr: {\n    system: {\n      pre: \"<s><|system|>\\n\",\n      post: \"</s>\\n\",\n    },\n    user: {\n      pre: \"<|user|>\\n\",\n      post: \"</s>\\n\",\n    },\n    assistant: {\n      pre: \"<|assistant|>\\n\",\n      post: \"</s>\\n\",\n    },\n    global: {\n      post: \"<|assistant|>\\n\",\n    },\n  },\n};\n\nexport const generateTgTemplate = (messages: any, template: string) => {\n  let prompt = \"\";\n  const state = { lastSystem: false, systemCount: 0, userCount: 0, assistantCount: 0 };\n  for (const message of messages) {\n    switch (message.role) {\n      case \"system\":\n        state.systemCount++;\n        state.lastSystem = message.content;\n        prompt += applyRole(template, message.role, message.content, state);\n        break;\n      case \"user\":\n        state.userCount++;\n        prompt += applyRole(template, message.role, message.content, state);\n        break;\n      case \"assistant\":\n        state.assistantCount++;\n        prompt += applyRole(template, message.role, message.content, state);\n        break;\n    }\n  }\n  prompt = applyRole(template, \"global\", prompt, state);\n  return prompt;\n};\n\nexport const applyTag = (template: string, role: string, type: string, state: any) => {\n  if (\n    type == \"pre\" &&\n    tgTemplates[template][role].flag == templateFlags.CARRY_SYSTEM_INST &&\n    state.systemCount == 1 &&\n    state.userCount == 1\n  ) {\n    return \"\";\n  }\n  return tgTemplates[template][role][type] || \"\";\n};\n\nexport const applyRole = (template: string, role: string, content: string, state: any) => {\n  if (tgTemplates[template] && tgTemplates[template][role]) {\n    if (tgTemplates[template][role].flag == templateFlags.ABSORB_ROLE) return \"\";\n    if (\n      tgTemplates[template][role].flag == templateFlags.APPEND_LAST_SYSTEM &&\n      state.lastSystem &&\n      state.userCount == 1\n    ) {\n      content = `${state.lastSystem}${\n        [\":\", \".\", \"!\", \"?\"].indexOf(state.lastSystem.slice(-1)) == -1 ? \":\" : \"\"\n      } ${content}`;\n    }\n    return applyTag(template, role, \"pre\", state) + (content || \"\") + applyTag(template, role, \"post\", state);\n  }\n  return content || \"\";\n};\n", "import { Tensor, TensorType } from \"../tensor\";\nimport { AiTask } from \"../ai\";\nimport { generateTgTemplate } from \"../templates\";\n\nexport type RoleScopedChatInput = {\n  role: string;\n  content: string;\n};\n\nexport type AiTextGenerationInput = {\n  prompt?: string;\n  raw?: boolean;\n  stream?: boolean;\n  max_tokens?: number;\n  messages?: RoleScopedChatInput[];\n};\n\nexport type AiTextGenerationOutput =\n  | {\n      response?: string;\n    }\n  | ReadableStream;\n\nexport class AiTextGeneration implements AiTask {\n  private modelSettings: any;\n  public inputs: AiTextGenerationInput;\n  public preProcessedInputs: any;\n  public postProcessedOutputs: AiTextGenerationOutput | ReadableStream;\n  public tensors: Array<Tensor<any>>;\n  // run ./scripts/gen-validators.ts if you change the schema\n  public schema = {\n    input: {\n      type: \"object\",\n      oneOf: [\n        {\n          properties: {\n            prompt: {\n              type: \"string\",\n              maxLength: 4096,\n            },\n            raw: {\n              type: \"boolean\",\n              default: false,\n            },\n            stream: {\n              type: \"boolean\",\n              default: false,\n            },\n            max_tokens: {\n              type: \"integer\",\n              default: 256,\n            },\n          },\n          required: [\"prompt\"],\n        },\n        {\n          properties: {\n            messages: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  role: {\n                    type: \"string\",\n                  },\n                  content: {\n                    type: \"string\",\n                    maxLength: 4096,\n                  },\n                },\n                required: [\"role\", \"content\"],\n              },\n            },\n            stream: {\n              type: \"boolean\",\n              default: false,\n            },\n            max_tokens: {\n              type: \"integer\",\n              default: 256,\n            },\n          },\n          required: [\"messages\"],\n        },\n      ],\n    },\n    output: {\n      oneOf: [\n        {\n          type: \"object\",\n          contentType: \"application/json\",\n          properties: {\n            response: {\n              type: \"string\",\n            },\n          },\n        },\n        {\n          type: \"string\",\n          contentType: \"text/event-stream\",\n          format: \"binary\",\n        },\n      ],\n    },\n  };\n\n  constructor(inputs: AiTextGenerationInput, modelSettings: any) {\n    this.inputs = inputs;\n    this.modelSettings = modelSettings || {\n      experimental: true,\n      inputsDefaultsStream: {\n        max_tokens: 512,\n      },\n      inputsDefaults: {\n        max_tokens: 256,\n      },\n      preProcessingArgs: {\n        promptTemplate: \"inst\",\n        defaultContext: \"\",\n      },\n    };\n  }\n\n  preProcessing() {\n    // model specific inputs defaults, if any\n    if (this.inputs.stream && this.modelSettings.inputsDefaultsStream) {\n      this.inputs = { ...this.modelSettings.inputsDefaultsStream, ...this.inputs };\n    } else if (this.modelSettings.inputsDefaults) {\n      this.inputs = { ...this.modelSettings.inputsDefaults, ...this.inputs };\n    }\n\n    let prompt: string = \"\";\n    // prompt syntax\n    if (this.inputs.messages === undefined) {\n      if (this.inputs.raw == true) {\n        prompt = this.inputs.prompt;\n      } else {\n        prompt = generateTgTemplate(\n          [\n            { role: \"system\", content: this.modelSettings.preProcessingArgs.defaultContext },\n            { role: \"user\", content: this.inputs.prompt },\n          ],\n          this.modelSettings.preProcessingArgs.promptTemplate\n        );\n      }\n    } else {\n      // scoped inputs\n      prompt = generateTgTemplate(this.inputs.messages, this.modelSettings.preProcessingArgs.promptTemplate);\n    }\n    this.preProcessedInputs = prompt;\n  }\n\n  generateTensors() {\n    this.tensors = [\n      new Tensor(TensorType.String, [this.preProcessedInputs], {\n        shape: [1],\n        name: \"INPUT_0\",\n      }),\n      new Tensor(TensorType.Uint32, [this.inputs.max_tokens], {\n        // sequence length\n        shape: [1],\n        name: \"INPUT_1\",\n      }),\n    ];\n  }\n\n  postProcessing(response: any) {\n    if (this.modelSettings.postProcessingFunc) {\n      this.postProcessedOutputs = { response: this.modelSettings.postProcessingFunc(response) };\n    } else {\n      this.postProcessedOutputs = { response: response.name.value[0] };\n    }\n  }\n\n  postProcessingStream(response: any) {\n    if (this.modelSettings.postProcessingFuncStream) {\n      return { response: this.modelSettings.postProcessingFuncStream(response) };\n    } else {\n      return { response: response.name.value[0] };\n    }\n  }\n}\n", "import { Tensor, TensorType } from \"../tensor\";\nimport { AiTask } from \"../ai\";\n\nexport type AiTextClassificationInput = {\n  text: string;\n};\n\nexport type AiTextClassificationOutput = {\n  score?: number;\n  label?: string;\n}[];\n\nexport class AiTextClassification implements AiTask {\n  private modelSettings: any;\n  public inputs: AiTextClassificationInput;\n  public preProcessedInputs: any;\n  public postProcessedOutputs: AiTextClassificationOutput;\n  public tensors: Array<Tensor<any>>;\n  // run ./scripts/gen-validators.ts if you change the schema\n  public schema = {\n    input: {\n      type: \"object\",\n      properties: {\n        text: {\n          type: \"string\",\n        },\n      },\n      required: [\"text\"],\n    },\n    output: {\n      type: \"array\",\n      contentType: \"application/json\",\n      items: {\n        type: \"object\",\n        properties: {\n          score: {\n            type: \"number\",\n          },\n          label: {\n            type: \"string\",\n          },\n        },\n      },\n    },\n  };\n\n  constructor(inputs: AiTextClassificationInput, modelSettings: any) {\n    this.inputs = inputs;\n    this.modelSettings = modelSettings;\n  }\n\n  preProcessing() {\n    this.preProcessedInputs = this.inputs;\n  }\n\n  generateTensors() {\n    this.tensors = [\n      new Tensor(TensorType.String, [this.preProcessedInputs.text], {\n        shape: [1],\n        name: \"input_text\",\n      }),\n    ];\n  }\n\n  postProcessing(response: any) {\n    this.postProcessedOutputs = [\n      {\n        label: \"NEGATIVE\",\n        score: response.logits.value[0][0],\n      },\n      {\n        label: \"POSITIVE\",\n        score: response.logits.value[0][1],\n      },\n    ];\n  }\n}\n", "import { Tensor, TensorType } from \"../tensor\";\nimport { AiTask } from \"../ai\";\n\nexport type AiTextEmbeddingsInput = {\n  text: string | string[];\n};\n\nexport type AiTextEmbeddingsOutput = {\n  shape: number[];\n  data: number[][];\n};\n\nconst chunkArray = (arr: any, size: number) =>\n  arr.length > size ? [arr.slice(0, size), ...chunkArray(arr.slice(size), size)] : [arr];\n\nexport class AiTextEmbeddings implements AiTask {\n  private modelSettings: any;\n  public inputs: AiTextEmbeddingsInput;\n  public preProcessedInputs: any;\n  public postProcessedOutputs: AiTextEmbeddingsOutput;\n  public tensors: Array<Tensor<any>>;\n  // run ./scripts/gen-validators.ts if you change the schema\n  public schema = {\n    input: {\n      type: \"object\",\n      properties: {\n        text: {\n          oneOf: [\n            { type: \"string\" },\n            {\n              type: \"array\",\n              items: {\n                type: \"string\",\n              },\n              maxItems: 100,\n            },\n          ],\n        },\n      },\n      required: [\"text\"],\n    },\n    output: {\n      type: \"object\",\n      contentType: \"application/json\",\n      properties: {\n        shape: {\n          type: \"array\",\n          items: {\n            type: \"number\",\n          },\n        },\n        data: {\n          type: \"array\",\n          items: {\n            type: \"array\",\n            items: {\n              type: \"number\",\n            },\n          },\n        },\n      },\n    },\n  };\n\n  constructor(inputs: AiTextEmbeddingsInput, modelSettings: any) {\n    this.inputs = inputs;\n    this.modelSettings = modelSettings;\n  }\n\n  preProcessing() {\n    this.preProcessedInputs = this.inputs;\n  }\n\n  generateTensors() {\n    this.tensors = [\n      new Tensor(\n        TensorType.String,\n        Array.isArray(this.preProcessedInputs.text) ? this.preProcessedInputs.text : [this.preProcessedInputs.text],\n        {\n          shape: [\n            Array.isArray(this.preProcessedInputs.text)\n              ? this.preProcessedInputs.text.length\n              : [this.preProcessedInputs.text].length,\n          ],\n          name: \"input_text\",\n        }\n      ),\n    ];\n  }\n\n  postProcessing(response: any) {\n    if (this.modelSettings.postProcessingFunc) {\n      this.postProcessedOutputs = this.modelSettings.postProcessingFunc(response);\n    } else {\n      this.postProcessedOutputs = {\n        shape: response.embeddings.shape,\n        data: response.embeddings.value,\n      };\n    }\n  }\n}\n", "import { Tensor, TensorType } from \"../tensor\";\nimport { AiTask } from \"../ai\";\n\nexport type AiTranslationInput = {\n  text: string;\n  target_lang: string;\n  source_lang?: string;\n};\n\nexport type AiTranslationOutput = {\n  translated_text?: string;\n};\n\nexport class AiTranslation implements AiTask {\n  private modelSettings: any;\n  public inputs: AiTranslationInput;\n  public preProcessedInputs: any;\n  public postProcessedOutputs: AiTranslationOutput;\n  public tensors: Array<Tensor<any>>;\n  // run ./scripts/gen-validators.ts if you change the schema\n  public schema = {\n    input: {\n      type: \"object\",\n      properties: {\n        text: {\n          type: \"string\",\n        },\n        source_lang: {\n          type: \"string\",\n          default: \"en\",\n        },\n        target_lang: {\n          type: \"string\",\n        },\n      },\n      required: [\"text\", \"target_lang\"],\n    },\n    output: {\n      type: \"object\",\n      contentType: \"application/json\",\n      properties: {\n        translated_text: {\n          type: \"string\",\n        },\n      },\n    },\n  };\n\n  constructor(inputs: AiTranslationInput, modelSettings: any) {\n    this.inputs = inputs;\n    this.modelSettings = modelSettings;\n  }\n\n  preProcessing() {\n    this.preProcessedInputs = this.inputs;\n  }\n\n  generateTensors() {\n    this.tensors = [\n      new Tensor(TensorType.String, [this.preProcessedInputs.text], {\n        shape: [1, 1],\n        name: \"text\",\n      }),\n      new Tensor(TensorType.String, [this.preProcessedInputs.source_lang || \"en\"], {\n        shape: [1, 1],\n        name: \"source_lang\",\n      }),\n      new Tensor(TensorType.String, [this.preProcessedInputs.target_lang], {\n        shape: [1, 1],\n        name: \"target_lang\",\n      }),\n    ];\n  }\n\n  postProcessing(response: any) {\n    this.postProcessedOutputs = { translated_text: response.name.value[0] };\n  }\n}\n", "import { Tensor, TensorType } from \"../tensor\";\nimport { AiTask } from \"../ai\";\n\nexport type AiSpeechRecognitionInput = {\n  audio: number[];\n};\n\nexport type AiSpeechRecognitionOutput = {\n  text?: string;\n};\n\nexport class AiSpeechRecognition implements AiTask {\n  private modelSettings: any;\n  public inputs: AiSpeechRecognitionInput;\n  public preProcessedInputs: any;\n  public postProcessedOutputs: AiSpeechRecognitionOutput;\n  public tensors: Array<Tensor<any>>;\n  // run ./scripts/gen-validators.ts if you change the schema\n  public schema = {\n    input: {\n      oneOf: [\n        { type: \"string\", format: \"binary\" },\n        {\n          type: \"object\",\n          properties: {\n            audio: {\n              type: \"array\",\n              items: {\n                type: \"number\",\n              },\n            },\n          },\n        },\n      ],\n    },\n    output: {\n      type: \"object\",\n      contentType: \"application/json\",\n      properties: {\n        text: {\n          type: \"string\",\n        },\n        word_count: {\n          type: \"number\",\n        },\n        words: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              word: {\n                type: \"string\",\n              },\n              start: {\n                type: \"number\",\n              },\n              end: {\n                type: \"number\",\n              },\n            },\n          },\n        },\n      },\n      required: [\"text\"],\n    },\n  };\n\n  constructor(inputs: AiSpeechRecognitionInput, modelSettings: any) {\n    this.inputs = inputs;\n    this.modelSettings = modelSettings;\n  }\n\n  preProcessing() {\n    this.preProcessedInputs = this.inputs;\n  }\n\n  generateTensors() {\n    this.tensors = [\n      new Tensor(TensorType.Uint8, this.preProcessedInputs.audio, {\n        shape: [1, this.preProcessedInputs.audio.length],\n        name: \"audio\",\n      }),\n    ];\n  }\n\n  postProcessing(response: any) {\n    if (this.modelSettings.postProcessingFunc) {\n      this.postProcessedOutputs = this.modelSettings.postProcessingFunc(response);\n    } else {\n      this.postProcessedOutputs = { text: response.name.value[0].trim() };\n    }\n  }\n}\n", "export const resnetLabels = [\n  \"TENCH\",\n  \"GOLDFISH\",\n  \"WHITE SHARK\",\n  \"TIGER SHARK\",\n  \"HAMMERHEAD SHARK\",\n  \"ELECTRIC RAY\",\n  \"STINGRAY\",\n  \"ROOSTER\",\n  \"HEN\",\n  \"OSTRICH\",\n  \"BRAMBLING\",\n  \"GOLDFINCH\",\n  \"HOUSE FINCH\",\n  \"SNOWBIRD\",\n  \"INDIGO FINCH\",\n  \"ROBIN\",\n  \"BULBUL\",\n  \"JAY\",\n  \"MAGPIE\",\n  \"CHICKADEE\",\n  \"WATER OUZEL\",\n  \"KITE\",\n  \"BALD EAGLE\",\n  \"VULTURE\",\n  \"GREAT GREY OWL\",\n  \"FIRE SALAMANDER\",\n  \"NEWT\",\n  \"EFT\",\n  \"SPOTTED SALAMANDER\",\n  \"AXOLOTL\",\n  \"BULL FROG\",\n  \"TREE FROG\",\n  \"TAILED FROG\",\n  \"LOGGERHEAD\",\n  \"LEATHERBACK TURTLE\",\n  \"MUD TURTLE\",\n  \"TERRAPIN\",\n  \"BOX TURTLE\",\n  \"BANDED GECKO\",\n  \"COMMON IGUANA\",\n  \"AMERICAN CHAMELEON\",\n  \"WHIPTAIL\",\n  \"AGAMA\",\n  \"FRILLED LIZARD\",\n  \"ALLIGATOR LIZARD\",\n  \"GILA MONSTER\",\n  \"GREEN LIZARD\",\n  \"AFRICAN CHAMELEON\",\n  \"KOMODO DRAGON\",\n  \"AFRICAN CROCODILE\",\n  \"AMERICAN ALLIGATOR\",\n  \"TRICERATOPS\",\n  \"THUNDER SNAKE\",\n  \"RINGNECK SNAKE\",\n  \"HOGNOSE SNAKE\",\n  \"GREEN SNAKE\",\n  \"KING SNAKE\",\n  \"GARTER SNAKE\",\n  \"WATER SNAKE\",\n  \"VINE SNAKE\",\n  \"NIGHT SNAKE\",\n  \"BOA\",\n  \"ROCK PYTHON\",\n  \"COBRA\",\n  \"GREEN MAMBA\",\n  \"SEA SNAKE\",\n  \"HORNED VIPER\",\n  \"DIAMONDBACK\",\n  \"SIDEWINDER\",\n  \"TRILOBITE\",\n  \"HARVESTMAN\",\n  \"SCORPION\",\n  \"GARDEN SPIDER\",\n  \"BARN SPIDER\",\n  \"GARDEN SPIDER\",\n  \"BLACK WIDOW\",\n  \"TARANTULA\",\n  \"WOLF SPIDER\",\n  \"TICK\",\n  \"CENTIPEDE\",\n  \"GROUSE\",\n  \"PTARMIGAN\",\n  \"RUFFED GROUSE\",\n  \"PRAIRIE CHICKEN\",\n  \"PEACOCK\",\n  \"QUAIL\",\n  \"PARTRIDGE\",\n  \"AFRICAN GREY\",\n  \"MACAW\",\n  \"COCKATOO\",\n  \"LORIKEET\",\n  \"COUCAL\",\n  \"BEE EATER\",\n  \"HORNBILL\",\n  \"HUMMINGBIRD\",\n  \"JACAMAR\",\n  \"TOUCAN\",\n  \"DRAKE\",\n  \"MERGANSER\",\n  \"GOOSE\",\n  \"BLACK SWAN\",\n  \"TUSKER\",\n  \"ECHIDNA\",\n  \"PLATYPUS\",\n  \"WALLABY\",\n  \"KOALA\",\n  \"WOMBAT\",\n  \"JELLYFISH\",\n  \"SEA ANEMONE\",\n  \"BRAIN CORAL\",\n  \"FLATWORM\",\n  \"NEMATODE\",\n  \"CONCH\",\n  \"SNAIL\",\n  \"SLUG\",\n  \"SEA SLUG\",\n  \"CHITON\",\n  \"CHAMBERED NAUTILUS\",\n  \"DUNGENESS CRAB\",\n  \"ROCK CRAB\",\n  \"FIDDLER CRAB\",\n  \"KING CRAB\",\n  \"AMERICAN LOBSTER\",\n  \"SPINY LOBSTER\",\n  \"CRAYFISH\",\n  \"HERMIT CRAB\",\n  \"ISOPOD\",\n  \"WHITE STORK\",\n  \"BLACK STORK\",\n  \"SPOONBILL\",\n  \"FLAMINGO\",\n  \"LITTLE BLUE HERON\",\n  \"AMERICAN EGRET\",\n  \"BITTERN\",\n  \"CRANE\",\n  \"LIMPKIN\",\n  \"EUROPEAN GALLINULE\",\n  \"AMERICAN COOT\",\n  \"BUSTARD\",\n  \"RUDDY TURNSTONE\",\n  \"RED-BACKED SANDPIPER\",\n  \"REDSHANK\",\n  \"DOWITCHER\",\n  \"OYSTERCATCHER\",\n  \"PELICAN\",\n  \"KING PENGUIN\",\n  \"ALBATROSS\",\n  \"GREY WHALE\",\n  \"KILLER WHALE\",\n  \"DUGONG\",\n  \"SEA LION\",\n  \"CHIHUAHUA\",\n  \"JAPANESE SPANIEL\",\n  \"MALTESE DOG\",\n  \"PEKINESE\",\n  \"SHIH-TZU\",\n  \"BLENHEIM SPANIEL\",\n  \"PAPILLON\",\n  \"TOY TERRIER\",\n  \"RHODESIAN RIDGEBACK\",\n  \"AFGHAN HOUND\",\n  \"BASSET\",\n  \"BEAGLE\",\n  \"BLOODHOUND\",\n  \"BLUETICK\",\n  \"COONHOUND\",\n  \"WALKER HOUND\",\n  \"ENGLISH FOXHOUND\",\n  \"REDBONE\",\n  \"BORZOI\",\n  \"IRISH WOLFHOUND\",\n  \"ITALIAN GREYHOUND\",\n  \"WHIPPET\",\n  \"IBIZAN HOUND\",\n  \"NORWEGIAN ELKHOUND\",\n  \"OTTERHOUND\",\n  \"SALUKI\",\n  \"SCOTTISH DEERHOUND\",\n  \"WEIMARANER\",\n  \"STAFFORDSHIRE BULLTERRIER\",\n  \"STAFFORDSHIRE TERRIER\",\n  \"BEDLINGTON TERRIER\",\n  \"BORDER TERRIER\",\n  \"KERRY BLUE TERRIER\",\n  \"IRISH TERRIER\",\n  \"NORFOLK TERRIER\",\n  \"NORWICH TERRIER\",\n  \"YORKSHIRE TERRIER\",\n  \"WIRE-HAIRED FOX TERRIER\",\n  \"LAKELAND TERRIER\",\n  \"SEALYHAM TERRIER\",\n  \"AIREDALE\",\n  \"CAIRN\",\n  \"AUSTRALIAN TERRIER\",\n  \"DANDIE DINMONT\",\n  \"BOSTON BULL\",\n  \"MINIATURE SCHNAUZER\",\n  \"GIANT SCHNAUZER\",\n  \"STANDARD SCHNAUZER\",\n  \"SCOTCH TERRIER\",\n  \"TIBETAN TERRIER\",\n  \"SILKY TERRIER\",\n  \"WHEATEN TERRIER\",\n  \"WHITE TERRIER\",\n  \"LHASA\",\n  \"RETRIEVER\",\n  \"CURLY-COATED RETRIEVER\",\n  \"GOLDEN RETRIEVER\",\n  \"LABRADOR RETRIEVER\",\n  \"CHESAPEAKE BAY RETRIEVER\",\n  \"SHORT-HAIRED POINTER\",\n  \"VISLA\",\n  \"ENGLISH SETTER\",\n  \"IRISH SETTER\",\n  \"GORDON SETTER\",\n  \"BRITTANY SPANIEL\",\n  \"CLUMBER\",\n  \"ENGLISH SPRINGER\",\n  \"WELSH SPRINGER SPANIEL\",\n  \"COCKER SPANIEL\",\n  \"SUSSEX SPANIEL\",\n  \"IRISH WATERSPANIEL\",\n  \"KUVASZ\",\n  \"SCHIPPERKE\",\n  \"GROENENDAEL\",\n  \"MALINOIS\",\n  \"BRIARD\",\n  \"KELPIE\",\n  \"KOMONDOR\",\n  \"OLD ENGLISH SHEEPDOG\",\n  \"SHETLAND SHEEPDOG\",\n  \"COLLIE\",\n  \"BORDER COLLIE\",\n  \"BOUVIER DES FLANDRES\",\n  \"ROTTWEILER\",\n  \"GERMAN SHEPHERD\",\n  \"DOBERMAN\",\n  \"MINIATURE PINSCHER\",\n  \"GREATER SWISS MOUNTAIN DOG\",\n  \"BERNESE MOUNTAIN DOG\",\n  \"APPENZELLER\",\n  \"ENTLEBUCHER\",\n  \"BOXER\",\n  \"BULL MASTIFF\",\n  \"TIBETAN MASTIFF\",\n  \"FRENCH BULLDOG\",\n  \"GREAT DANE\",\n  \"SAINT BERNARD\",\n  \"ESKIMO DOG\",\n  \"MALAMUTE\",\n  \"SIBERIAN HUSKY\",\n  \"DALMATIAN\",\n  \"AFFENPINSCHER\",\n  \"BASENJI\",\n  \"PUG\",\n  \"LEONBERG\",\n  \"NEWFOUNDLAND\",\n  \"GREAT PYRENEES\",\n  \"SAMOYED\",\n  \"POMERANIAN\",\n  \"CHOW\",\n  \"KEESHOND\",\n  \"BRABANCON GRIFFON\",\n  \"PEMBROKE\",\n  \"CARDIGAN\",\n  \"TOY POODLE\",\n  \"MINIATURE POODLE\",\n  \"STANDARD POODLE\",\n  \"MEXICAN HAIRLESS\",\n  \"TIMBER WOLF\",\n  \"WHITE WOLF\",\n  \"RED WOLF\",\n  \"COYOTE\",\n  \"DINGO\",\n  \"DHOLE\",\n  \"AFRICAN HUNTING DOG\",\n  \"HYENA\",\n  \"RED FOX\",\n  \"KIT FOX\",\n  \"ARCTIC FOX\",\n  \"GREY FOX\",\n  \"TABBY\",\n  \"TIGER CAT\",\n  \"PERSIAN CAT\",\n  \"SIAMESE CAT\",\n  \"EGYPTIAN CAT\",\n  \"COUGAR\",\n  \"LYNX\",\n  \"LEOPARD\",\n  \"SNOW LEOPARD\",\n  \"JAGUAR\",\n  \"LION\",\n  \"TIGER\",\n  \"CHEETAH\",\n  \"BROWN BEAR\",\n  \"AMERICAN BLACK BEAR\",\n  \"ICE BEAR\",\n  \"SLOTH BEAR\",\n  \"MONGOOSE\",\n  \"MEERKAT\",\n  \"TIGER BEETLE\",\n  \"LADYBUG\",\n  \"GROUND BEETLE\",\n  \"LONG-HORNED BEETLE\",\n  \"LEAF BEETLE\",\n  \"DUNG BEETLE\",\n  \"RHINOCEROS BEETLE\",\n  \"WEEVIL\",\n  \"FLY\",\n  \"BEE\",\n  \"ANT\",\n  \"GRASSHOPPER\",\n  \"CRICKET\",\n  \"WALKING STICK\",\n  \"COCKROACH\",\n  \"MANTIS\",\n  \"CICADA\",\n  \"LEAFHOPPER\",\n  \"LACEWING\",\n  \"DRAGONFLY\",\n  \"DAMSELFLY\",\n  \"ADMIRAL\",\n  \"RINGLET\",\n  \"MONARCH\",\n  \"CABBAGE BUTTERFLY\",\n  \"SULPHUR BUTTERFLY\",\n  \"LYCAENID\",\n  \"STARFISH\",\n  \"SEA URCHIN\",\n  \"SEA CUCUMBER\",\n  \"WOOD RABBIT\",\n  \"HARE\",\n  \"ANGORA\",\n  \"HAMSTER\",\n  \"PORCUPINE\",\n  \"FOX SQUIRREL\",\n  \"MARMOT\",\n  \"BEAVER\",\n  \"GUINEA PIG\",\n  \"SORREL\",\n  \"ZEBRA\",\n  \"HOG\",\n  \"WILD BOAR\",\n  \"WARTHOG\",\n  \"HIPPOPOTAMUS\",\n  \"OX\",\n  \"WATER BUFFALO\",\n  \"BISON\",\n  \"RAM\",\n  \"BIGHORN\",\n  \"IBEX\",\n  \"HARTEBEEST\",\n  \"IMPALA\",\n  \"GAZELLE\",\n  \"ARABIAN CAMEL\",\n  \"LLAMA\",\n  \"WEASEL\",\n  \"MINK\",\n  \"POLECAT\",\n  \"BLACK-FOOTED FERRET\",\n  \"OTTER\",\n  \"SKUNK\",\n  \"BADGER\",\n  \"ARMADILLO\",\n  \"THREE-TOED SLOTH\",\n  \"ORANGUTAN\",\n  \"GORILLA\",\n  \"CHIMPANZEE\",\n  \"GIBBON\",\n  \"SIAMANG\",\n  \"GUENON\",\n  \"PATAS\",\n  \"BABOON\",\n  \"MACAQUE\",\n  \"LANGUR\",\n  \"COLOBUS\",\n  \"PROBOSCIS MONKEY\",\n  \"MARMOSET\",\n  \"CAPUCHIN\",\n  \"HOWLER MONKEY\",\n  \"TITI\",\n  \"SPIDER MONKEY\",\n  \"SQUIRREL MONKEY\",\n  \"MADAGASCAR CAT\",\n  \"INDRI\",\n  \"INDIAN ELEPHANT\",\n  \"AFRICAN ELEPHANT\",\n  \"LESSER PANDA\",\n  \"GIANT PANDA\",\n  \"BARRACOUTA\",\n  \"EEL\",\n  \"COHO\",\n  \"ROCK BEAUTY\",\n  \"ANEMONE FISH\",\n  \"STURGEON\",\n  \"GAR\",\n  \"LIONFISH\",\n  \"PUFFER\",\n  \"ABACUS\",\n  \"ABAYA\",\n  \"ACADEMIC GOWN\",\n  \"ACCORDION\",\n  \"ACOUSTIC GUITAR\",\n  \"AIRCRAFT CARRIER\",\n  \"AIRLINER\",\n  \"AIRSHIP\",\n  \"ALTAR\",\n  \"AMBULANCE\",\n  \"AMPHIBIAN\",\n  \"ANALOG CLOCK\",\n  \"APIARY\",\n  \"APRON\",\n  \"ASHCAN\",\n  \"ASSAULT RIFLE\",\n  \"BACKPACK\",\n  \"BAKERY\",\n  \"BALANCE BEAM\",\n  \"BALLOON\",\n  \"BALLPOINT\",\n  \"BAND AID\",\n  \"BANJO\",\n  \"BANNISTER\",\n  \"BARBELL\",\n  \"BARBER CHAIR\",\n  \"BARBERSHOP\",\n  \"BARN\",\n  \"BAROMETER\",\n  \"BARREL\",\n  \"BARROW\",\n  \"BASEBALL\",\n  \"BASKETBALL\",\n  \"BASSINET\",\n  \"BASSOON\",\n  \"BATHING CAP\",\n  \"BATH TOWEL\",\n  \"BATHTUB\",\n  \"BEACH WAGON\",\n  \"BEACON\",\n  \"BEAKER\",\n  \"BEARSKIN\",\n  \"BEER BOTTLE\",\n  \"BEER GLASS\",\n  \"BELL COTE\",\n  \"BIB\",\n  \"BICYCLE-BUILT-FOR-TWO\",\n  \"BIKINI\",\n  \"BINDER\",\n  \"BINOCULARS\",\n  \"BIRDHOUSE\",\n  \"BOATHOUSE\",\n  \"BOBSLED\",\n  \"BOLO TIE\",\n  \"BONNET\",\n  \"BOOKCASE\",\n  \"BOOKSHOP\",\n  \"BOTTLECAP\",\n  \"BOW\",\n  \"BOW TIE\",\n  \"BRASS\",\n  \"BRASSIERE\",\n  \"BREAKWATER\",\n  \"BREASTPLATE\",\n  \"BROOM\",\n  \"BUCKET\",\n  \"BUCKLE\",\n  \"BULLETPROOF VEST\",\n  \"BULLET TRAIN\",\n  \"BUTCHER SHOP\",\n  \"CAB\",\n  \"CALDRON\",\n  \"CANDLE\",\n  \"CANNON\",\n  \"CANOE\",\n  \"CAN OPENER\",\n  \"CARDIGAN\",\n  \"CAR MIRROR\",\n  \"CAROUSEL\",\n  \"CARPENTERS KIT\",\n  \"CARTON\",\n  \"CAR WHEEL\",\n  \"CASH MACHINE\",\n  \"CASSETTE\",\n  \"CASSETTE PLAYER\",\n  \"CASTLE\",\n  \"CATAMARAN\",\n  \"CD PLAYER\",\n  \"CELLO\",\n  \"CELLULAR TELEPHONE\",\n  \"CHAIN\",\n  \"CHAINLINK FENCE\",\n  \"CHAIN MAIL\",\n  \"CHAIN SAW\",\n  \"CHEST\",\n  \"CHIFFONIER\",\n  \"CHIME\",\n  \"CHINA CABINET\",\n  \"CHRISTMAS STOCKING\",\n  \"CHURCH\",\n  \"CINEMA\",\n  \"CLEAVER\",\n  \"CLIFF DWELLING\",\n  \"CLOAK\",\n  \"CLOG\",\n  \"COCKTAIL SHAKER\",\n  \"COFFEE MUG\",\n  \"COFFEEPOT\",\n  \"COIL\",\n  \"COMBINATION LOCK\",\n  \"COMPUTER KEYBOARD\",\n  \"CONFECTIONERY\",\n  \"CONTAINER SHIP\",\n  \"CONVERTIBLE\",\n  \"CORKSCREW\",\n  \"CORNET\",\n  \"COWBOY BOOT\",\n  \"COWBOY HAT\",\n  \"CRADLE\",\n  \"CRANE\",\n  \"CRASH HELMET\",\n  \"CRATE\",\n  \"CRIB\",\n  \"CROCK POT\",\n  \"CROQUET BALL\",\n  \"CRUTCH\",\n  \"CUIRASS\",\n  \"DAM\",\n  \"DESK\",\n  \"DESKTOP COMPUTER\",\n  \"DIAL TELEPHONE\",\n  \"DIAPER\",\n  \"DIGITAL CLOCK\",\n  \"DIGITAL WATCH\",\n  \"DINING TABLE\",\n  \"DISHRAG\",\n  \"DISHWASHER\",\n  \"DISK BRAKE\",\n  \"DOCK\",\n  \"DOGSLED\",\n  \"DOME\",\n  \"DOORMAT\",\n  \"DRILLING PLATFORM\",\n  \"DRUM\",\n  \"DRUMSTICK\",\n  \"DUMBBELL\",\n  \"DUTCH OVEN\",\n  \"ELECTRIC FAN\",\n  \"ELECTRIC GUITAR\",\n  \"ELECTRIC LOCOMOTIVE\",\n  \"ENTERTAINMENT CENTER\",\n  \"ENVELOPE\",\n  \"ESPRESSO MAKER\",\n  \"FACE POWDER\",\n  \"FEATHER BOA\",\n  \"FILE\",\n  \"FIREBOAT\",\n  \"FIRE ENGINE\",\n  \"FIRE SCREEN\",\n  \"FLAGPOLE\",\n  \"FLUTE\",\n  \"FOLDING CHAIR\",\n  \"FOOTBALL HELMET\",\n  \"FORKLIFT\",\n  \"FOUNTAIN\",\n  \"FOUNTAIN PEN\",\n  \"FOUR-POSTER\",\n  \"FREIGHT CAR\",\n  \"FRENCH HORN\",\n  \"FRYING PAN\",\n  \"FUR COAT\",\n  \"GARBAGE TRUCK\",\n  \"GASMASK\",\n  \"GAS PUMP\",\n  \"GOBLET\",\n  \"GO-KART\",\n  \"GOLF BALL\",\n  \"GOLFCART\",\n  \"GONDOLA\",\n  \"GONG\",\n  \"GOWN\",\n  \"GRAND PIANO\",\n  \"GREENHOUSE\",\n  \"GRILLE\",\n  \"GROCERY STORE\",\n  \"GUILLOTINE\",\n  \"HAIR SLIDE\",\n  \"HAIR SPRAY\",\n  \"HALF TRACK\",\n  \"HAMMER\",\n  \"HAMPER\",\n  \"HAND BLOWER\",\n  \"HAND-HELD COMPUTER\",\n  \"HANDKERCHIEF\",\n  \"HARD DISC\",\n  \"HARMONICA\",\n  \"HARP\",\n  \"HARVESTER\",\n  \"HATCHET\",\n  \"HOLSTER\",\n  \"HOME THEATER\",\n  \"HONEYCOMB\",\n  \"HOOK\",\n  \"HOOPSKIRT\",\n  \"HORIZONTAL BAR\",\n  \"HORSE CART\",\n  \"HOURGLASS\",\n  \"IPOD\",\n  \"IRON\",\n  \"JACK-O-LANTERN\",\n  \"JEAN\",\n  \"JEEP\",\n  \"JERSEY\",\n  \"JIGSAW PUZZLE\",\n  \"JINRIKISHA\",\n  \"JOYSTICK\",\n  \"KIMONO\",\n  \"KNEE PAD\",\n  \"KNOT\",\n  \"LAB COAT\",\n  \"LADLE\",\n  \"LAMPSHADE\",\n  \"LAPTOP\",\n  \"LAWN MOWER\",\n  \"LENS CAP\",\n  \"LETTER OPENER\",\n  \"LIBRARY\",\n  \"LIFEBOAT\",\n  \"LIGHTER\",\n  \"LIMOUSINE\",\n  \"LINER\",\n  \"LIPSTICK\",\n  \"LOAFER\",\n  \"LOTION\",\n  \"LOUDSPEAKER\",\n  \"LOUPE\",\n  \"LUMBERMILL\",\n  \"MAGNETIC COMPASS\",\n  \"MAILBAG\",\n  \"MAILBOX\",\n  \"MAILLOT\",\n  \"MAILLOT\",\n  \"MANHOLE COVER\",\n  \"MARACA\",\n  \"MARIMBA\",\n  \"MASK\",\n  \"MATCHSTICK\",\n  \"MAYPOLE\",\n  \"MAZE\",\n  \"MEASURING CUP\",\n  \"MEDICINE CHEST\",\n  \"MEGALITH\",\n  \"MICROPHONE\",\n  \"MICROWAVE\",\n  \"MILITARY UNIFORM\",\n  \"MILK CAN\",\n  \"MINIBUS\",\n  \"MINISKIRT\",\n  \"MINIVAN\",\n  \"MISSILE\",\n  \"MITTEN\",\n  \"MIXING BOWL\",\n  \"MOBILE HOME\",\n  \"MODEL T\",\n  \"MODEM\",\n  \"MONASTERY\",\n  \"MONITOR\",\n  \"MOPED\",\n  \"MORTAR\",\n  \"MORTARBOARD\",\n  \"MOSQUE\",\n  \"MOSQUITO NET\",\n  \"MOTOR SCOOTER\",\n  \"MOUNTAIN BIKE\",\n  \"MOUNTAIN TENT\",\n  \"MOUSE\",\n  \"MOUSETRAP\",\n  \"MOVING VAN\",\n  \"MUZZLE\",\n  \"NAIL\",\n  \"NECK BRACE\",\n  \"NECKLACE\",\n  \"NIPPLE\",\n  \"NOTEBOOK\",\n  \"OBELISK\",\n  \"OBOE\",\n  \"OCARINA\",\n  \"ODOMETER\",\n  \"OIL FILTER\",\n  \"ORGAN\",\n  \"OSCILLOSCOPE\",\n  \"OVERSKIRT\",\n  \"OXCART\",\n  \"OXYGEN MASK\",\n  \"PACKET\",\n  \"PADDLE\",\n  \"PADDLEWHEEL\",\n  \"PADLOCK\",\n  \"PAINTBRUSH\",\n  \"PAJAMA\",\n  \"PALACE\",\n  \"PANPIPE\",\n  \"PAPER TOWEL\",\n  \"PARACHUTE\",\n  \"PARALLEL BARS\",\n  \"PARK BENCH\",\n  \"PARKING METER\",\n  \"PASSENGER CAR\",\n  \"PATIO\",\n  \"PAY-PHONE\",\n  \"PEDESTAL\",\n  \"PENCIL BOX\",\n  \"PENCIL SHARPENER\",\n  \"PERFUME\",\n  \"PETRI DISH\",\n  \"PHOTOCOPIER\",\n  \"PICK\",\n  \"PICKELHAUBE\",\n  \"PICKET FENCE\",\n  \"PICKUP\",\n  \"PIER\",\n  \"PIGGY BANK\",\n  \"PILL BOTTLE\",\n  \"PILLOW\",\n  \"PING-PONG BALL\",\n  \"PINWHEEL\",\n  \"PIRATE\",\n  \"PITCHER\",\n  \"PLANE\",\n  \"PLANETARIUM\",\n  \"PLASTIC BAG\",\n  \"PLATE RACK\",\n  \"PLOW\",\n  \"PLUNGER\",\n  \"POLAROID CAMERA\",\n  \"POLE\",\n  \"POLICE VAN\",\n  \"PONCHO\",\n  \"POOL TABLE\",\n  \"POP BOTTLE\",\n  \"POT\",\n  \"POTTERS WHEEL\",\n  \"POWER DRILL\",\n  \"PRAYER RUG\",\n  \"PRINTER\",\n  \"PRISON\",\n  \"PROJECTILE\",\n  \"PROJECTOR\",\n  \"PUCK\",\n  \"PUNCHING BAG\",\n  \"PURSE\",\n  \"QUILL\",\n  \"QUILT\",\n  \"RACER\",\n  \"RACKET\",\n  \"RADIATOR\",\n  \"RADIO\",\n  \"RADIO TELESCOPE\",\n  \"RAIN BARREL\",\n  \"RECREATIONAL VEHICLE\",\n  \"REEL\",\n  \"REFLEX CAMERA\",\n  \"REFRIGERATOR\",\n  \"REMOTE CONTROL\",\n  \"RESTAURANT\",\n  \"REVOLVER\",\n  \"RIFLE\",\n  \"ROCKING CHAIR\",\n  \"ROTISSERIE\",\n  \"RUBBER ERASER\",\n  \"RUGBY BALL\",\n  \"RULE\",\n  \"RUNNING SHOE\",\n  \"SAFE\",\n  \"SAFETY PIN\",\n  \"SALTSHAKER\",\n  \"SANDAL\",\n  \"SARONG\",\n  \"SAX\",\n  \"SCABBARD\",\n  \"SCALE\",\n  \"SCHOOL BUS\",\n  \"SCHOONER\",\n  \"SCOREBOARD\",\n  \"SCREEN\",\n  \"SCREW\",\n  \"SCREWDRIVER\",\n  \"SEAT BELT\",\n  \"SEWING MACHINE\",\n  \"SHIELD\",\n  \"SHOE SHOP\",\n  \"SHOJI\",\n  \"SHOPPING BASKET\",\n  \"SHOPPING CART\",\n  \"SHOVEL\",\n  \"SHOWER CAP\",\n  \"SHOWER CURTAIN\",\n  \"SKI\",\n  \"SKI MASK\",\n  \"SLEEPING BAG\",\n  \"SLIDE RULE\",\n  \"SLIDING DOOR\",\n  \"SLOT\",\n  \"SNORKEL\",\n  \"SNOWMOBILE\",\n  \"SNOWPLOW\",\n  \"SOAP DISPENSER\",\n  \"SOCCER BALL\",\n  \"SOCK\",\n  \"SOLAR DISH\",\n  \"SOMBRERO\",\n  \"SOUP BOWL\",\n  \"SPACE BAR\",\n  \"SPACE HEATER\",\n  \"SPACE SHUTTLE\",\n  \"SPATULA\",\n  \"SPEEDBOAT\",\n  \"SPIDER WEB\",\n  \"SPINDLE\",\n  \"SPORTS CAR\",\n  \"SPOTLIGHT\",\n  \"STAGE\",\n  \"STEAM LOCOMOTIVE\",\n  \"STEEL ARCH BRIDGE\",\n  \"STEEL DRUM\",\n  \"STETHOSCOPE\",\n  \"STOLE\",\n  \"STONE WALL\",\n  \"STOPWATCH\",\n  \"STOVE\",\n  \"STRAINER\",\n  \"STREETCAR\",\n  \"STRETCHER\",\n  \"STUDIO COUCH\",\n  \"STUPA\",\n  \"SUBMARINE\",\n  \"SUIT\",\n  \"SUNDIAL\",\n  \"SUNGLASS\",\n  \"SUNGLASSES\",\n  \"SUNSCREEN\",\n  \"SUSPENSION BRIDGE\",\n  \"SWAB\",\n  \"SWEATSHIRT\",\n  \"SWIMMING TRUNKS\",\n  \"SWING\",\n  \"SWITCH\",\n  \"SYRINGE\",\n  \"TABLE LAMP\",\n  \"TANK\",\n  \"TAPE PLAYER\",\n  \"TEAPOT\",\n  \"TEDDY\",\n  \"TELEVISION\",\n  \"TENNIS BALL\",\n  \"THATCH\",\n  \"THEATER CURTAIN\",\n  \"THIMBLE\",\n  \"THRESHER\",\n  \"THRONE\",\n  \"TILE ROOF\",\n  \"TOASTER\",\n  \"TOBACCO SHOP\",\n  \"TOILET SEAT\",\n  \"TORCH\",\n  \"TOTEM POLE\",\n  \"TOW TRUCK\",\n  \"TOYSHOP\",\n  \"TRACTOR\",\n  \"TRAILER TRUCK\",\n  \"TRAY\",\n  \"TRENCH COAT\",\n  \"TRICYCLE\",\n  \"TRIMARAN\",\n  \"TRIPOD\",\n  \"TRIUMPHAL ARCH\",\n  \"TROLLEYBUS\",\n  \"TROMBONE\",\n  \"TUB\",\n  \"TURNSTILE\",\n  \"TYPEWRITER KEYBOARD\",\n  \"UMBRELLA\",\n  \"UNICYCLE\",\n  \"UPRIGHT\",\n  \"VACUUM\",\n  \"VASE\",\n  \"VAULT\",\n  \"VELVET\",\n  \"VENDING MACHINE\",\n  \"VESTMENT\",\n  \"VIADUCT\",\n  \"VIOLIN\",\n  \"VOLLEYBALL\",\n  \"WAFFLE IRON\",\n  \"WALL CLOCK\",\n  \"WALLET\",\n  \"WARDROBE\",\n  \"WARPLANE\",\n  \"WASHBASIN\",\n  \"WASHER\",\n  \"WATER BOTTLE\",\n  \"WATER JUG\",\n  \"WATER TOWER\",\n  \"WHISKEY JUG\",\n  \"WHISTLE\",\n  \"WIG\",\n  \"WINDOW SCREEN\",\n  \"WINDOW SHADE\",\n  \"WINDSOR TIE\",\n  \"WINE BOTTLE\",\n  \"WING\",\n  \"WOK\",\n  \"WOODEN SPOON\",\n  \"WOOL\",\n  \"WORM FENCE\",\n  \"WRECK\",\n  \"YAWL\",\n  \"YURT\",\n  \"WEB SITE\",\n  \"COMIC BOOK\",\n  \"CROSSWORD PUZZLE\",\n  \"STREET SIGN\",\n  \"TRAFFIC LIGHT\",\n  \"BOOK JACKET\",\n  \"MENU\",\n  \"PLATE\",\n  \"GUACAMOLE\",\n  \"CONSOMME\",\n  \"HOT POT\",\n  \"TRIFLE\",\n  \"ICE CREAM\",\n  \"ICE LOLLY\",\n  \"FRENCH LOAF\",\n  \"BAGEL\",\n  \"PRETZEL\",\n  \"CHEESEBURGER\",\n  \"HOTDOG\",\n  \"MASHED POTATO\",\n  \"HEAD CABBAGE\",\n  \"BROCCOLI\",\n  \"CAULIFLOWER\",\n  \"ZUCCHINI\",\n  \"SPAGHETTI SQUASH\",\n  \"ACORN SQUASH\",\n  \"BUTTERNUT SQUASH\",\n  \"CUCUMBER\",\n  \"ARTICHOKE\",\n  \"BELL PEPPER\",\n  \"CARDOON\",\n  \"MUSHROOM\",\n  \"GRANNY SMITH\",\n  \"STRAWBERRY\",\n  \"ORANGE\",\n  \"LEMON\",\n  \"FIG\",\n  \"PINEAPPLE\",\n  \"BANANA\",\n  \"JACKFRUIT\",\n  \"CUSTARD APPLE\",\n  \"POMEGRANATE\",\n  \"HAY\",\n  \"CARBONARA\",\n  \"CHOCOLATE SAUCE\",\n  \"DOUGH\",\n  \"MEAT LOAF\",\n  \"PIZZA\",\n  \"POTPIE\",\n  \"BURRITO\",\n  \"RED WINE\",\n  \"ESPRESSO\",\n  \"CUP\",\n  \"EGGNOG\",\n  \"ALP\",\n  \"BUBBLE\",\n  \"CLIFF\",\n  \"CORAL REEF\",\n  \"GEYSER\",\n  \"LAKESIDE\",\n  \"PROMONTORY\",\n  \"SANDBAR\",\n  \"SEASHORE\",\n  \"VALLEY\",\n  \"VOLCANO\",\n  \"BALLPLAYER\",\n  \"GROOM\",\n  \"SCUBA DIVER\",\n  \"RAPESEED\",\n  \"DAISY\",\n  \"LADY SLIPPER\",\n  \"CORN\",\n  \"ACORN\",\n  \"HIP\",\n  \"BUCKEYE\",\n  \"CORAL FUNGUS\",\n  \"AGARIC\",\n  \"GYROMITRA\",\n  \"STINKHORN\",\n  \"EARTHSTAR\",\n  \"HEN-OF-THE-WOODS\",\n  \"BOLETE\",\n  \"EAR\",\n  \"TOILET TISSUE\",\n];\n", "import { Tensor, TensorType } from \"../tensor\";\nimport { AiTask } from \"../ai\";\nimport { resnetLabels } from \"./data/labels\";\n\nexport type AiImageClassificationInput = {\n  image: number[];\n};\n\nexport type AiImageClassificationOutput = {\n  score?: number;\n  label?: string;\n}[];\n\nexport class AiImageClassification implements AiTask {\n  private modelSettings: any;\n  public inputs: AiImageClassificationInput;\n  public preProcessedInputs: any;\n  public postProcessedOutputs: AiImageClassificationOutput;\n  public tensors: Array<Tensor<any>>;\n  // run ./scripts/gen-validators.ts if you change the schema\n  public schema = {\n    input: {\n      oneOf: [\n        { type: \"string\", format: \"binary\" },\n        {\n          type: \"object\",\n          properties: {\n            image: {\n              type: \"array\",\n              items: {\n                type: \"number\",\n              },\n            },\n          },\n        },\n      ],\n    },\n    output: {\n      type: \"array\",\n      contentType: \"application/json\",\n      items: {\n        type: \"object\",\n        properties: {\n          score: {\n            type: \"number\",\n          },\n          label: {\n            type: \"string\",\n          },\n        },\n      },\n    },\n  };\n\n  constructor(inputs: AiImageClassificationInput, modelSettings: any) {\n    this.inputs = inputs;\n    this.modelSettings = modelSettings;\n  }\n\n  preProcessing() {\n    this.preProcessedInputs = this.inputs;\n  }\n\n  generateTensors() {\n    this.tensors = [\n      new Tensor(TensorType.Uint8, this.preProcessedInputs.image, {\n        shape: [1, this.preProcessedInputs.image.length],\n        name: \"input\",\n      }),\n    ];\n  }\n\n  postProcessing(response: any) {\n    const labels = [];\n    const scores = response.output.value[0];\n    for (var s in scores) labels.push({ label: resnetLabels[s], score: scores[s] });\n    labels.sort((a, b) => {\n      return b.score - a.score;\n    });\n    this.postProcessedOutputs = labels.slice(0, 5);\n  }\n}\n", "import { Tensor, TensorType } from \"../tensor\";\nimport { AiTask } from \"../ai\";\n\nexport type AiObjectDetectionInput = {\n  image: number[];\n};\n\nexport type AiObjectDetectionOutput = {\n  score?: number;\n  label?: string;\n}[];\n\nexport class AiObjectDetection implements AiTask {\n  private modelSettings: any;\n  public inputs: AiObjectDetectionInput;\n  public preProcessedInputs: any;\n  public postProcessedOutputs: AiObjectDetectionOutput;\n  public tensors: Array<Tensor<any>>;\n  // run ./scripts/gen-validators.ts if you change the schema\n  public schema = {\n    input: {\n      oneOf: [\n        { type: \"string\", format: \"binary\" },\n        {\n          type: \"object\",\n          properties: {\n            image: {\n              type: \"array\",\n              items: {\n                type: \"number\",\n              },\n            },\n          },\n        },\n      ],\n    },\n    output: {\n      type: \"array\",\n      contentType: \"application/json\",\n      items: {\n        type: \"object\",\n        properties: {\n          score: {\n            type: \"number\",\n          },\n          label: {\n            type: \"string\",\n          },\n          box: {\n            type: \"object\",\n            properties: {\n              xmin: {\n                type: \"number\",\n              },\n              ymin: {\n                type: \"number\",\n              },\n              xmax: {\n                type: \"number\",\n              },\n              ymax: {\n                type: \"number\",\n              },\n            },\n          },\n        },\n      },\n    },\n  };\n\n  constructor(inputs: AiObjectDetectionInput, modelSettings: any) {\n    this.inputs = inputs;\n    this.modelSettings = modelSettings;\n  }\n\n  preProcessing() {\n    this.preProcessedInputs = this.inputs;\n  }\n\n  generateTensors() {\n    this.tensors = [\n      new Tensor(TensorType.Uint8, this.preProcessedInputs.image, {\n        shape: [1, this.preProcessedInputs.image.length],\n        name: \"input\",\n      }),\n    ];\n  }\n\n  postProcessing(response: any) {\n    const scores = response.scores.value[0].map((score: any, i: number) => {\n      return {\n        score: score,\n        label: response.name.value[response.labels.value[0][i]],\n        box: {\n          xmin: response.boxes.value[0][i][0],\n          ymin: response.boxes.value[0][i][1],\n          xmax: response.boxes.value[0][i][2],\n          ymax: response.boxes.value[0][i][3],\n        },\n      };\n    });\n    this.postProcessedOutputs = scores.sort((a: any, b: any) => {\n      return b.score - a.score;\n    });\n  }\n}\n", "import { Tensor, TensorType } from \"../tensor\";\nimport { AiTask } from \"../ai\";\n\nexport type AiTextToImageInput = {\n  prompt: string;\n  num_steps?: number;\n};\n\nexport type AiTextToImageOutput = Uint8Array;\n\nexport class AiTextToImage implements AiTask {\n  private modelSettings: any;\n  public inputs: AiTextToImageInput;\n  public preProcessedInputs: any;\n  public postProcessedOutputs: AiTextToImageOutput;\n  public tensors: Array<Tensor<any>>;\n  // run ./scripts/gen-validators.ts if you change the schema\n  public schema = {\n    input: {\n      type: \"object\",\n      properties: {\n        prompt: {\n          type: \"string\",\n        },\n        num_steps: {\n          type: \"integer\",\n          default: 20,\n          maximum: 20,\n        },\n      },\n      required: [\"prompt\"],\n    },\n    output: {\n      type: \"string\",\n      contentType: \"image/png\",\n      format: \"binary\",\n    },\n  };\n\n  constructor(inputs: AiTextToImageInput, modelSettings: any) {\n    this.inputs = inputs;\n    this.modelSettings = modelSettings;\n  }\n\n  preProcessing() {\n    this.preProcessedInputs = this.inputs;\n  }\n\n  generateTensors() {\n    this.tensors = [\n      new Tensor(TensorType.String, [this.preProcessedInputs.prompt], {\n        shape: [1],\n        name: \"input_text\",\n      }),\n      new Tensor(TensorType.Int32, [this.preProcessedInputs.num_steps], {\n        shape: [1],\n        name: \"num_steps\",\n      }),\n    ];\n  }\n\n  postProcessing(response: any) {\n    this.postProcessedOutputs = new Uint8Array(response.output_image.value);\n  }\n}\n", "import { Tensor, TensorType } from \"../tensor\";\nimport { AiTask } from \"../ai\";\n\nexport type AiSentenceSimilarityInput = {\n  source: string;\n  sentences: string[];\n};\n\nexport type AiSentenceSimilarityOutput = number[];\n\nexport class AiSentenceSimilarity implements AiTask {\n  public inputs: AiSentenceSimilarityInput;\n  public preProcessedInputs: any;\n  public postProcessedOutputs: AiSentenceSimilarityOutput;\n  public tensors: Array<Tensor<any>>;\n  // run ./scripts/gen-validators.ts if you change the schema\n  public schema = {\n    input: {\n      type: \"object\",\n      properties: {\n        source: {\n          type: \"string\",\n        },\n        sentences: {\n          type: \"array\",\n          items: {\n            type: \"string\",\n          },\n        },\n      },\n      required: [\"source\", \"sentences\"],\n    },\n    output: {\n      type: \"array\",\n      contentType: \"application/json\",\n      items: {\n        type: \"number\",\n      },\n    },\n  };\n\n  constructor(inputs: AiSentenceSimilarityInput) {\n    this.inputs = inputs;\n  }\n\n  preProcessing() {\n    this.preProcessedInputs = this.inputs;\n  }\n\n  generateTensors() {\n    this.tensors = [\n      new Tensor(TensorType.String, [this.preProcessedInputs.source], {\n        shape: [1],\n        name: \"source_sentence\",\n      }),\n      new Tensor(TensorType.String, this.preProcessedInputs.sentences, {\n        shape: [this.preProcessedInputs.sentences.length],\n        name: \"sentences\",\n      }),\n    ];\n  }\n\n  postProcessing(response: any) {\n    this.postProcessedOutputs = response.scores.value;\n  }\n}\n", "import { AiTextGeneration } from \"./tasks/text-generation\";\nimport { AiTextClassification } from \"./tasks/text-classification\";\nimport { AiTextEmbeddings } from \"./tasks/text-embeddings\";\nimport { AiTranslation } from \"./tasks/translation\";\nimport { AiSpeechRecognition } from \"./tasks/speech-recognition\";\nimport { AiImageClassification } from \"./tasks/image-classification\";\nimport { AiObjectDetection } from \"./tasks/object-detection\";\nimport { AiTextToImage } from \"./tasks/text-to-image\";\nimport { AiSentenceSimilarity } from \"./tasks/sentence-similarity\";\n\nconst chatDefaultContext =\n  \"A chat between a curious human and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the human's questions.\";\nconst codeDefaultContext =\n  \"Write code to solve the following coding problem that obeys the constraints and passes the example test cases. Please wrap your code answer using   ```:\";\n\nexport const modelMappings = {\n  \"text-classification\": {\n    models: [\"@cf/huggingface/distilbert-sst-2-int8\"],\n    class: AiTextClassification,\n    id: \"19606750-23ed-4371-aab2-c20349b53a60\",\n  },\n  \"text-to-image\": {\n    models: [\"@cf/stabilityai/stable-diffusion-xl-base-1.0\",\"@cf/runwayml/stable-diffusion-v1-5\"],\n    class: AiTextToImage,\n    id: \"3d6e1f35-341b-4915-a6c8-9a7142a9033a\",\n  },\n  \"sentence-similarity\": {\n    models: [\"@hf/sentence-transformers/all-minilm-l6-v2\"],\n    class: AiSentenceSimilarity,\n    id: \"69bf4e84-441e-401a-bdfc-256fd54d0fff\",\n  },\n  \"text-embeddings\": {\n    models: [\n      \"@cf/baai/bge-small-en-v1.5\",\n      \"@cf/baai/bge-base-en-v1.5\",\n      \"@cf/baai/bge-large-en-v1.5\",\n      \"@hf/baai/bge-base-en-v1.5\",\n    ],\n    class: AiTextEmbeddings,\n    id: \"0137cdcf-162a-4108-94f2-1ca59e8c65ee\",\n  },\n  \"speech-recognition\": {\n    models: [\"@cf/openai/whisper\"],\n    class: AiSpeechRecognition,\n    id: \"dfce1c48-2a81-462e-a7fd-de97ce985207\",\n  },\n  \"image-classification\": {\n    models: [\"@cf/microsoft/resnet-50\"],\n    class: AiImageClassification,\n    id: \"00cd182b-bf30-4fc4-8481-84a3ab349657\",\n  },\n  \"object-detection\": {\n    models: [\"@cf/facebook/detr-resnet-50\"],\n    class: AiObjectDetection,\n    id: \"9c178979-90d9-49d8-9e2c-0f1cf01815d4\",\n  },\n  \"text-generation\": {\n    models: [\n      \"@cf/meta/llama-2-7b-chat-int8\",\n      \"@cf/mistral/mistral-7b-instruct-v0.1\",\n      \"@cf/meta/llama-2-7b-chat-fp16\",\n      \"@hf/thebloke/llama-2-13b-chat-awq\",\n      \"@hf/thebloke/zephyr-7b-beta-awq\",\n      \"@hf/thebloke/mistral-7b-instruct-v0.1-awq\",\n      \"@hf/thebloke/codellama-7b-instruct-awq\",\n      \"@hf/thebloke/openchat_3.5-awq\",\n      \"@hf/thebloke/openhermes-2.5-mistral-7b-awq\",\n      \"@hf/thebloke/starling-lm-7b-alpha-awq\",\n      \"@hf/thebloke/orca-2-13b-awq\",\n      \"@hf/thebloke/neural-chat-7b-v3-1-awq\",\n      \"@hf/thebloke/llamaguard-7b-awq\",\n      \"@hf/thebloke/deepseek-coder-6.7b-base-awq\",\n      \"@hf/thebloke/deepseek-coder-6.7b-instruct-awq\",\n    ],\n    class: AiTextGeneration,\n    id: \"c329a1f9-323d-4e91-b2aa-582dd4188d34\",\n  },\n  translation: {\n    models: [\"@cf/meta/m2m100-1.2b\"],\n    class: AiTranslation,\n    id: \"f57d07cb-9087-487a-bbbf-bc3e17fecc4b\",\n  },\n} as const;\n\n/*\n * Model settings:\n *\n * experimental: excluded from config-api and devdocs if true\n * preProcessingArgs: per-model pre-processing arguments\n * inputsDefaults: per-model inputs defaults\n * inputsDefaultsStream: per-model inputs defaults when stream is used\n *\n */\n\nconst tgiPostProc = (response: any, ignoreTokens?: any) => {\n  let r = response[\"generated_text\"].value[0];\n  if (ignoreTokens) {\n    for (var i in ignoreTokens) r = r.replace(ignoreTokens[i], \"\");\n  }\n  return r;\n};\n\nexport const modelSettings = {\n  \"@hf/sentence-transformers/all-minilm-l6-v2\": {\n    experimental: true,\n  },\n  \"@hf/baai/bge-base-en-v1.5\": {\n    postProcessingFunc: (r: any) => {\n      return {\n        shape: r.data.shape,\n        data: r.data.value,\n      };\n    },\n  },\n  \"@hf/thebloke/deepseek-coder-6.7b-instruct-awq\": {\n    inputsDefaultsStream: {\n      max_tokens: 512,\n    },\n    inputsDefaults: {\n      max_tokens: 256,\n    },\n    preProcessingArgs: {\n      promptTemplate: \"deepseek\",\n      defaultContext: codeDefaultContext,\n    },\n    postProcessingFunc: (r: any) => tgiPostProc(r, [\"<|EOT|>\"]),\n    postProcessingFuncStream: (r: any) => tgiPostProc(r, [\"<|EOT|>\"]),\n  },\n  \"@hf/thebloke/deepseek-coder-6.7b-base-awq\": {\n    inputsDefaultsStream: {\n      max_tokens: 512,\n    },\n    inputsDefaults: {\n      max_tokens: 256,\n    },\n    preProcessingArgs: {\n      promptTemplate: \"bare\",\n      defaultContext: codeDefaultContext,\n    },\n    postProcessingFunc: tgiPostProc,\n    postProcessingFuncStream: tgiPostProc,\n  },\n  \"@hf/thebloke/llamaguard-7b-awq\": {\n    inputsDefaultsStream: {\n      max_tokens: 512,\n    },\n    inputsDefaults: {\n      max_tokens: 256,\n    },\n    preProcessingArgs: {\n      promptTemplate: \"inst\",\n      defaultContext: chatDefaultContext,\n    },\n    postProcessingFunc: tgiPostProc,\n    postProcessingFuncStream: tgiPostProc,\n  },\n  \"@hf/thebloke/openchat_3.5-awq\": {\n    experimental: true,\n    inputsDefaultsStream: {\n      max_tokens: 512,\n    },\n    inputsDefaults: {\n      max_tokens: 256,\n    },\n    preProcessingArgs: {\n      promptTemplate: \"openchat\",\n      defaultContext: chatDefaultContext,\n    },\n    postProcessingFunc: tgiPostProc,\n    postProcessingFuncStream: tgiPostProc,\n  },\n  \"@hf/thebloke/openhermes-2.5-mistral-7b-awq\": {\n    inputsDefaultsStream: {\n      max_tokens: 512,\n    },\n    inputsDefaults: {\n      max_tokens: 256,\n    },\n    preProcessingArgs: {\n      promptTemplate: \"chatml\",\n      defaultContext: chatDefaultContext,\n    },\n    postProcessingFunc: (r: any) => tgiPostProc(r, [\"<|im_end|>\"]),\n    postProcessingFuncStream: (r: any) => tgiPostProc(r, [\"<|im_end|>\"]),\n  },\n  \"@hf/thebloke/starling-lm-7b-alpha-awq\": {\n    experimental: true,\n    inputsDefaultsStream: {\n      max_tokens: 512,\n    },\n    inputsDefaults: {\n      max_tokens: 256,\n    },\n    preProcessingArgs: {\n      promptTemplate: \"openchat\",\n      defaultContext: chatDefaultContext,\n    },\n    postProcessingFunc: (r: any) => tgiPostProc(r, [\"<|end_of_turn|>\"]),\n    postProcessingFuncStream: (r: any) => tgiPostProc(r, [\"<|end_of_turn|>\"]),\n  },\n  \"@hf/thebloke/orca-2-13b-awq\": {\n    experimental: true,\n    inputsDefaultsStream: {\n      max_tokens: 512,\n    },\n    inputsDefaults: {\n      max_tokens: 256,\n    },\n    preProcessingArgs: {\n      promptTemplate: \"chatml\",\n      defaultContext: chatDefaultContext,\n    },\n    postProcessingFunc: tgiPostProc,\n    postProcessingFuncStream: tgiPostProc,\n  },\n  \"@hf/thebloke/neural-chat-7b-v3-1-awq\": {\n    inputsDefaultsStream: {\n      max_tokens: 512,\n    },\n    inputsDefaults: {\n      max_tokens: 256,\n    },\n    preProcessingArgs: {\n      promptTemplate: \"orca-hashes\",\n      defaultContext: chatDefaultContext,\n    },\n    postProcessingFunc: tgiPostProc,\n    postProcessingFuncStream: tgiPostProc,\n  },\n  \"@hf/thebloke/llama-2-13b-chat-awq\": {\n    inputsDefaultsStream: {\n      max_tokens: 512,\n    },\n    inputsDefaults: {\n      max_tokens: 256,\n    },\n    preProcessingArgs: {\n      promptTemplate: \"llama2\",\n      defaultContext: chatDefaultContext,\n    },\n    postProcessingFunc: tgiPostProc,\n    postProcessingFuncStream: tgiPostProc,\n  },\n  \"@hf/thebloke/zephyr-7b-beta-awq\": {\n    inputsDefaultsStream: {\n      max_tokens: 596,\n    },\n    inputsDefaults: {\n      max_tokens: 256,\n    },\n    preProcessingArgs: {\n      promptTemplate: \"zephyr\",\n      defaultContext: chatDefaultContext,\n    },\n    postProcessingFunc: tgiPostProc,\n    postProcessingFuncStream: tgiPostProc,\n  },\n  \"@hf/thebloke/mistral-7b-instruct-v0.1-awq\": {\n    inputsDefaultsStream: {\n      max_tokens: 596,\n    },\n    inputsDefaults: {\n      max_tokens: 256,\n    },\n    preProcessingArgs: {\n      promptTemplate: \"mistral-instruct\",\n      defaultContext: chatDefaultContext,\n    },\n    postProcessingFunc: tgiPostProc,\n    postProcessingFuncStream: tgiPostProc,\n  },\n  \"@hf/thebloke/codellama-7b-instruct-awq\": {\n    inputsDefaultsStream: {\n      max_tokens: 596,\n    },\n    inputsDefaults: {\n      max_tokens: 256,\n    },\n    preProcessingArgs: {\n      promptTemplate: \"llama2\",\n      defaultContext: codeDefaultContext,\n    },\n    postProcessingFunc: tgiPostProc,\n    postProcessingFuncStream: tgiPostProc,\n  },\n  \"@cf/meta/llama-2-7b-chat-fp16\": {\n    inputsDefaultsStream: {\n      max_tokens: 2500,\n    },\n    inputsDefaults: {\n      max_tokens: 256,\n    },\n    preProcessingArgs: {\n      promptTemplate: \"llama2\",\n      defaultContext: chatDefaultContext,\n    },\n  },\n  \"@cf/meta/llama-2-7b-chat-int8\": {\n    inputsDefaultsStream: {\n      max_tokens: 1800,\n    },\n    inputsDefaults: {\n      max_tokens: 256,\n    },\n    preProcessingArgs: {\n      promptTemplate: \"llama2\",\n      defaultContext: chatDefaultContext,\n    },\n  },\n  \"@cf/openai/whisper\": {\n    postProcessingFunc: (response: any) => {\n      // new whiser\n      if (response[\"word_count\"]) {\n        return {\n          text: response[\"name\"].value.join(\"\").trim(),\n          word_count: parseInt(response[\"word_count\"].value),\n          words: response[\"name\"].value.map((w: any, i: number) => {\n            return {\n              word: w.trim(),\n              start: response[\"timestamps\"].value[0][i][0],\n              end: response[\"timestamps\"].value[0][i][1],\n            };\n          }),\n        };\n      } else {\n        return {\n          text: response[\"name\"].value.join(\"\").trim(),\n        };\n      }\n    },\n  },\n  \"@cf/mistral/mistral-7b-instruct-v0.1\": {\n    inputsDefaultsStream: {\n      max_tokens: 1800,\n    },\n    inputsDefaults: {\n      max_tokens: 256,\n    },\n    preProcessingArgs: {\n      promptTemplate: \"mistral-instruct\",\n      defaultContext: chatDefaultContext,\n    },\n  },\n};\n\n// tests need this\nexport const addModel = (task: string, model: string, settings: any) => {\n  modelMappings[task].models.push(model);\n  modelSettings[model] = settings;\n};\n", "import { modelSettings } from \"./catalog\";\nimport { Tensor, TensorsObject } from \"./tensor\";\n\nexport const debugLog = (dd: Boolean, what: string, args: any) => {\n  if (dd) {\n    console.log(`\\u001b[1m${what}`);\n    if (args[0] !== false) {\n      if (typeof args == \"object\" || Array.isArray(args)) {\n        const json = JSON.stringify(args);\n        console.log(json.length > 512 ? `${json.substring(0, 512)}...` : json);\n      } else {\n        console.log(args);\n      }\n    }\n  }\n};\n\nexport const parseInputs = (inputs: any) => {\n  if (Array.isArray(inputs)) {\n    return inputs.map((input) => input.toJSON());\n  }\n  if (inputs !== null && typeof inputs === \"object\") {\n    return Object.keys(inputs).map((key) => {\n      let tensor = inputs[key].toJSON();\n      tensor.name = key;\n      return tensor;\n    });\n  }\n  throw new Error(`invalid inputs, must be Array<Tensor<any>> | TensorsObject`);\n};\n\nexport const tensorByName = (result: any) => {\n  const outputByName: TensorsObject = {};\n  for (let i = 0, len = result.length; i < len; i++) {\n    const tensor = Tensor.fromJSON(result[i]);\n    const name = tensor.name || \"output\" + i;\n    outputByName[name] = tensor;\n  }\n  return outputByName;\n};\n\nexport const getModelSettings = (model: string, key?: string) => {\n  const models = Object.keys(modelSettings);\n  for (var m in models) {\n    if (models[m] == model) {\n      return key ? modelSettings[models[m]][key] : modelSettings[models[m]];\n    }\n  }\n  return false;\n};\n\n// simplified code from https://github.com/rexxars/eventsource-parser\n\nexport interface EventSourceParser {\n  feed(chunk: string): void;\n  reset(): void;\n}\n\nexport interface ParsedEvent {\n  type: \"event\";\n  event?: string;\n  id?: string;\n  data: string;\n}\n\nexport interface ReconnectInterval {\n  type: \"reconnect-interval\";\n  value: number;\n}\n\nexport type ParseEvent = ParsedEvent | ReconnectInterval;\nexport type EventSourceParseCallback = (event: ParseEvent) => void;\n\nexport class EventSourceParserStream extends TransformStream<string, ParsedEvent> {\n  constructor() {\n    let parser!: EventSourceParser;\n\n    super({\n      start(controller) {\n        parser = createParser((event: any) => {\n          if (event.type === \"event\") {\n            controller.enqueue(event);\n          }\n        });\n      },\n      transform(chunk) {\n        parser.feed(chunk);\n      },\n    });\n  }\n}\n\nconst BOM = [239, 187, 191];\n\nfunction hasBom(buffer: string) {\n  return BOM.every((charCode: number, index: number) => buffer.charCodeAt(index) === charCode);\n}\n\nexport function createParser(onParse: EventSourceParseCallback): EventSourceParser {\n  // Processing state\n  let isFirstChunk: boolean;\n  let buffer: string;\n  let startingPosition: number;\n  let startingFieldLength: number;\n\n  // Event state\n  let eventId: string | undefined;\n  let eventName: string | undefined;\n  let data: string;\n\n  reset();\n  return { feed, reset };\n\n  function reset(): void {\n    isFirstChunk = true;\n    buffer = \"\";\n    startingPosition = 0;\n    startingFieldLength = -1;\n\n    eventId = undefined;\n    eventName = undefined;\n    data = \"\";\n  }\n\n  function feed(chunk: string): void {\n    buffer = buffer ? buffer + chunk : chunk;\n\n    // Strip any UTF8 byte order mark (BOM) at the start of the stream.\n    // Note that we do not strip any non - UTF8 BOM, as eventsource streams are\n    // always decoded as UTF8 as per the specification.\n    if (isFirstChunk && hasBom(buffer)) {\n      buffer = buffer.slice(BOM.length);\n    }\n\n    isFirstChunk = false;\n\n    // Set up chunk-specific processing state\n    const length = buffer.length;\n    let position = 0;\n    let discardTrailingNewline = false;\n\n    // Read the current buffer byte by byte\n    while (position < length) {\n      // EventSource allows for carriage return + line feed, which means we\n      // need to ignore a linefeed character if the previous character was a\n      // carriage return\n      // @todo refactor to reduce nesting, consider checking previous byte?\n      // @todo but consider multiple chunks etc\n      if (discardTrailingNewline) {\n        if (buffer[position] === \"\\n\") {\n          ++position;\n        }\n        discardTrailingNewline = false;\n      }\n\n      let lineLength = -1;\n      let fieldLength = startingFieldLength;\n      let character: string;\n\n      for (let index = startingPosition; lineLength < 0 && index < length; ++index) {\n        character = buffer[index];\n        if (character === \":\" && fieldLength < 0) {\n          fieldLength = index - position;\n        } else if (character === \"\\r\") {\n          discardTrailingNewline = true;\n          lineLength = index - position;\n        } else if (character === \"\\n\") {\n          lineLength = index - position;\n        }\n      }\n\n      if (lineLength < 0) {\n        startingPosition = length - position;\n        startingFieldLength = fieldLength;\n        break;\n      } else {\n        startingPosition = 0;\n        startingFieldLength = -1;\n      }\n\n      parseEventStreamLine(buffer, position, fieldLength, lineLength);\n\n      position += lineLength + 1;\n    }\n\n    if (position === length) {\n      // If we consumed the entire buffer to read the event, reset the buffer\n      buffer = \"\";\n    } else if (position > 0) {\n      // If there are bytes left to process, set the buffer to the unprocessed\n      // portion of the buffer only\n      buffer = buffer.slice(position);\n    }\n  }\n\n  function parseEventStreamLine(lineBuffer: string, index: number, fieldLength: number, lineLength: number) {\n    if (lineLength === 0) {\n      // We reached the last line of this event\n      if (data.length > 0) {\n        onParse({\n          type: \"event\",\n          id: eventId,\n          event: eventName || undefined,\n          data: data.slice(0, -1), // remove trailing newline\n        });\n\n        data = \"\";\n        eventId = undefined;\n      }\n      eventName = undefined;\n      return;\n    }\n\n    const noValue = fieldLength < 0;\n    const field = lineBuffer.slice(index, index + (noValue ? lineLength : fieldLength));\n    let step = 0;\n\n    if (noValue) {\n      step = lineLength;\n    } else if (lineBuffer[index + fieldLength + 1] === \" \") {\n      step = fieldLength + 2;\n    } else {\n      step = fieldLength + 1;\n    }\n\n    const position = index + step;\n    const valueLength = lineLength - step;\n    const value = lineBuffer.slice(position, position + valueLength).toString();\n\n    if (field === \"data\") {\n      data += value ? `${value}\\n` : \"\\n\";\n    } else if (field === \"event\") {\n      eventName = value;\n    } else if (field === \"id\" && !value.includes(\"\\u0000\")) {\n      eventId = value;\n    } else if (field === \"retry\") {\n      const retry = parseInt(value, 10);\n      if (!Number.isNaN(retry)) {\n        onParse({ type: \"reconnect-interval\", value: retry });\n      }\n    }\n  }\n}\n\nexport class ResultStream extends TransformStream {\n  constructor() {\n    super({\n      transform(chunk, controller) {\n        if (chunk.data === \"[DONE]\") {\n          return;\n        }\n\n        try {\n          const data = JSON.parse(chunk.data);\n          controller.enqueue(data);\n        } catch (err) {\n          console.error(`failed to parse incoming data (${err.stack}): ${chunk.data}`);\n          return;\n        }\n      },\n    });\n  }\n}\n\nexport const getEventStream = (body: ReadableStream) => {\n  const { readable, writable } = new TransformStream();\n  const eventStream = (body ?? new ReadableStream())\n    .pipeThrough(new TextDecoderStream())\n    .pipeThrough(new EventSourceParserStream())\n    .pipeThrough(new ResultStream());\n  const reader = eventStream.getReader();\n  const writer = writable.getWriter();\n  const encoder = new TextEncoder();\n  const write = async (data: string) => {\n    await writer.write(encoder.encode(data));\n  };\n  return {\n    readable,\n    reader,\n    writer,\n    write,\n  };\n};\n\n// end eventsource-parser\n\nexport const readStream = (\n  body: ReadableStream,\n  debug: boolean,\n  ctx: any,\n  tensorData: boolean,\n  postProcessing: Function | false\n) => {\n  const { readable, reader, writer, write } = getEventStream(body);\n\n  const waitUntil = ctx && ctx.waitUntil ? (f: any) => ctx.waitUntil(f()) : (f: any) => f();\n\n  waitUntil(async () => {\n    try {\n      for (;;) {\n        const { done, value } = await reader.read();\n        if (done) {\n          await write(\"data: [DONE]\\n\\n\");\n          break;\n        }\n        debugLog(debug, \"stream response\", value);\n        if (tensorData) {\n          const output = tensorByName(value.result);\n          await write(`data: ${JSON.stringify(postProcessing ? postProcessing(output) : output)}\\n\\n`);\n        } else {\n          await write(`data: ${JSON.stringify(value)}\\n\\n`);\n        }\n      }\n    } catch (e) {\n      console.error(e.stack);\n      await write(\"an unknown error occurred while streaming\");\n    }\n    await writer.close();\n  });\n\n  return readable;\n};\n", "import { Tensor, TensorsObject } from \"./tensor\";\nimport { readStream, getModelSettings, parseInputs, tensorByName } from \"./tools\";\n\ntype RunOptions = {\n  stream: boolean;\n  postProcessing?: Function;\n};\n\ntype InternalAPI = {\n  input: any[];\n  stream: boolean;\n  output?: any[];\n};\n\nexport type SessionOptions = {\n  extraHeaders?: {};\n  ctx?: any;\n  debug?: boolean;\n  apiEndpoint?: string;\n  prefix?: string;\n};\n\nclass InferenceUpstreamError extends Error {\n  httpCode: number;\n  constructor(message: string, httpCode: number) {\n    super(message);\n    this.name = \"InferenceUpstreamError\";\n    this.httpCode = httpCode;\n  }\n}\n\nexport class InferenceSession {\n  private binding: any;\n  private model: string;\n  private options: SessionOptions;\n\n  constructor(binding: any, model: string, options: SessionOptions = {}) {\n    this.binding = binding;\n    this.model = model;\n    this.options = options;\n  }\n\n  async run(inputs: Array<Tensor<any>> | TensorsObject, options?: RunOptions): Promise<TensorsObject | ReadableStream> {\n    const jsonInputs = parseInputs(inputs);\n\n    const inferRequest: InternalAPI = {\n      input: jsonInputs,\n      stream: false,\n    };\n    if (options?.stream) {\n      inferRequest.stream = options?.stream;\n    }\n\n    const body = JSON.stringify(inferRequest);\n    const compressedReadableStream = new Response(body).body.pipeThrough(new CompressionStream(\"gzip\"));\n    const reqId = crypto.randomUUID();\n\n    const fetchOptions = {\n      method: \"POST\",\n      body: compressedReadableStream,\n      headers: {\n        ...(this.options?.extraHeaders || {}),\n        \"content-encoding\": \"gzip\",\n        \"cf-ai-req-id\": reqId,\n        \"cf-consn-sdk-version\": \"@version@\",\n        \"cf-consn-model-id\": `${this.options.prefix ? `${this.options.prefix}:` : \"\"}${this.model}`,\n      },\n    };\n\n    const res = this.options.apiEndpoint\n      ? await fetch(this.options.apiEndpoint, fetchOptions)\n      : await this.binding.fetch(\"http://workers-binding.ai/run\", fetchOptions);\n\n    if (!res.ok) {\n      throw new InferenceUpstreamError(await res.text(), res.status);\n    }\n\n    if (!options?.stream) {\n      const { result } = await res.json();\n      return tensorByName(result);\n    } else {\n      return readStream(res.body, this.options.debug, this.options.ctx, true, options.postProcessing);\n    }\n  }\n}\n", "import { Tensor } from \"./tensor\";\nimport { InferenceSession, SessionOptions } from \"./session\";\nimport { readStream, getModelSettings, debugLog } from \"./tools\";\nimport { modelMappings, addModel } from \"./catalog\";\n\nexport type AiTask = {\n  tensors: Array<Tensor<any>>;\n  preProcessedInputs: any;\n  postProcessedOutputs: any;\n  schema: any;\n  preProcessing: Function;\n  generateTensors: Function;\n  postProcessing: Function;\n  postProcessingStream?: Function;\n};\n\ntype AiOptions = {\n  debug?: boolean;\n  apiGateway?: Boolean;\n  apiAccount?: string;\n  apiToken?: string;\n  sessionOptions?: SessionOptions;\n};\n\ntype ModelMappings = typeof modelMappings;\n\ntype GetModelName<T> = {\n  [K in keyof T]: T[K] extends { models: readonly (infer U)[] } ? U : never;\n}[keyof T];\n\ntype ModelName = GetModelName<ModelMappings>;\n\ntype GetModelClass<M extends ModelName, T> = {\n  [K in keyof T]: T[K] extends { models: readonly string[]; class: infer C }\n    ? M extends T[K][\"models\"][number]\n      ? C\n      : never\n    : never;\n}[keyof T];\n\ntype ConstructorParametersForModel<M extends ModelName> = ConstructorParameters<GetModelClass<M, ModelMappings>>[0];\n\nexport class Ai {\n  private binding: any;\n  private options: AiOptions;\n  private task: AiTask;\n\n  constructor(binding: any, options: AiOptions = {}) {\n    this.binding = binding;\n    this.options = options;\n  }\n\n  addModel(task: string, model: string, settings: any) {\n    addModel(task, model, settings);\n  }\n\n  async run<M extends ModelName>(model: M, inputs: ConstructorParametersForModel<M>): Promise<any> {\n    const tasks = Object.keys(modelMappings);\n\n    for (var t in tasks) {\n      if (modelMappings[tasks[t]].models.indexOf(model) !== -1) {\n        const settings = getModelSettings(model);\n        const sessionOptions = this.options.sessionOptions || {};\n        this.task = new modelMappings[tasks[t]].class(inputs, settings);\n        debugLog(this.options.debug, \"input\", inputs);\n        // code to handle using the API Gateway instead\n        if (this.options.apiGateway) {\n          const fetchOptions = {\n            method: \"POST\",\n            body: JSON.stringify(inputs),\n            headers: {\n              authorization: `Bearer ${this.options.apiToken}`,\n              \"content-type\": \"application/json\",\n            },\n          };\n          const res = await fetch(\n            `https://api.cloudflare.com/client/v4/accounts/${this.options.apiAccount}/ai/run/${model}`,\n            fetchOptions\n          );\n          if (!res.ok) {\n            throw new Error(await res.text());\n          }\n          // normal\n          if (res.headers.get(\"content-type\") == \"application/json\") {\n            const { result } = await res.json();\n            return result;\n          } else if (res.headers.get(\"content-type\") == \"text/event-stream\") {\n            return readStream(res.body, this.options.debug, sessionOptions.ctx, false, false);\n          } else {\n            // binary\n            const blob = await res.blob();\n            return blob;\n          }\n        } else {\n          // Normal binding\n          this.task.preProcessing();\n          debugLog(this.options.debug, \"pre-processed inputs\", this.task.preProcessedInputs);\n          this.task.generateTensors();\n          debugLog(this.options.debug, \"input tensors\", this.task.tensors);\n          const session = new InferenceSession(this.binding, model, {\n            ...{ debug: this.options.debug ? true : false },\n            ...sessionOptions,\n          });\n          if ((inputs as any).stream) {\n            debugLog(this.options.debug, \"streaming\", false);\n            return await session.run(this.task.tensors, {\n              stream: true,\n              postProcessing: (r: any) => {\n                return this.task.postProcessingStream(r);\n              },\n            });\n          } else {\n            const response = await session.run(this.task.tensors);\n            debugLog(this.options.debug, \"response\", response);\n            this.task.postProcessing(response, sessionOptions.ctx);\n            debugLog(this.options.debug, \"post-processed response\", this.task.postProcessedOutputs);\n            return this.task.postProcessedOutputs;\n          }\n        }\n      }\n    }\n\n    throw new Error(`No such model ${model} or task`);\n  }\n}\n"],
  "mappings": "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",
  "names": ["TensorType", "value", "templateFlags", "modelSettings", "modelSettings", "modelSettings", "modelSettings", "modelSettings", "modelSettings", "modelSettings", "modelSettings"]
}
